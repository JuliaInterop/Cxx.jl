using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcxxffi"], :libcxxffi),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaInterop/Cxx.jl/releases/download/libcxxffi-binaries/"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/libcxxffi.v0.0.0.x86_64-linux-gnu-gcc7.tar.gz", "cc53946f4867d95f543ad112db6a5ce40bbdf9f5b9a8982906a14c1cff5aaced"),
    MacOS(:x86_64) => ("$bin_prefix/libcxxffi.v0.0.0.x86_64-apple-darwin14-gcc7.tar.gz", "76aa1dfc7ecb97069043ed6e19b685371e04daf92d73201aaf054678e2a11cf1"),
    Windows(:x86_64) => ("https://github.com/Gnimuc/CxxBuilder/releases/download/v0.0.5-3/libcxxffi.v0.0.0.x86_64-w64-mingw32-gcc7.tar.gz", "de0dc5990e34a6a77984996936a15c4e2e8d57adaa61b7c74847b263cc52d38a"),
    FreeBSD(:x86_64) => ("$bin_prefix/libcxxffi.v0.0.0.x86_64-unknown-freebsd11.1-gcc7.tar.gz", "930df7bf7ecded6936dd9f637787b7eade402c07c0c2b2b49c4e72329d6bd9ef"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose, ignore_platform=true)
end

# Write out a deps.jl file that will contain mappings for our products
# write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
